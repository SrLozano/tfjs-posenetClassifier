import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import { tsParticles } from 'tsparticles';
export * from 'tsparticles';

class NgParticlesComponent {
    constructor() {
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
    ngAfterViewInit() {
        tsParticles.init();
        this.particlesInit.emit(tsParticles);
        const cb = (container) => {
            this.particlesLoaded.emit(container);
        };
        if (this.url) {
            tsParticles.loadJSON(this.id, this.url).then(cb);
        }
        else if (this.options) {
            tsParticles.load(this.id, this.options).then(cb);
        }
        else {
            console.error('You must specify options or url to load tsParticles');
        }
    }
}
NgParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
NgParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};
class ParticlesComponent extends NgParticlesComponent {
    constructor() {
        super(...arguments);
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
}
ParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'Particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
ParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};

class NgParticlesModule {
}
NgParticlesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgParticlesComponent, ParticlesComponent],
                imports: [],
                exports: [NgParticlesComponent, ParticlesComponent]
            },] }
];

/*
 * Public API Surface of ng-particles
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgParticlesComponent, NgParticlesModule, ParticlesComponent };
//# sourceMappingURL=ng-particles.js.map
