import { Component, EventEmitter, Input, Output } from '@angular/core';
import { tsParticles } from 'tsparticles';
export class NgParticlesComponent {
    constructor() {
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
    ngAfterViewInit() {
        tsParticles.init();
        this.particlesInit.emit(tsParticles);
        const cb = (container) => {
            this.particlesLoaded.emit(container);
        };
        if (this.url) {
            tsParticles.loadJSON(this.id, this.url).then(cb);
        }
        else if (this.options) {
            tsParticles.load(this.id, this.options).then(cb);
        }
        else {
            console.error('You must specify options or url to load tsParticles');
        }
    }
}
NgParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
NgParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};
export class ParticlesComponent extends NgParticlesComponent {
    constructor() {
        super(...arguments);
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
}
ParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'Particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
ParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFydGljbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWF0dGVvL1Byb2plY3RzL0dpdEh1YiBQcm9qZWN0cy90c3BhcnRpY2xlcy90c3BhcnRpY2xlcy9jb21wb25lbnRzL2FuZ3VsYXIvcHJvamVjdHMvbmctcGFydGljbGVzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9uZy1wYXJ0aWNsZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFVMUMsTUFBTSxPQUFPLG9CQUFvQjtJQU5qQztRQVVjLG9CQUFlLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7UUFDekUsa0JBQWEsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQW1CM0UsQ0FBQztJQWpCVSxlQUFlO1FBQ2xCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVuQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVyQyxNQUFNLEVBQUUsR0FBRyxDQUFDLFNBQXFCLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDVixXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwRDthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0wsQ0FBQzs7O1lBN0JKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOytCQUNpQjthQUU5Qjs7O3NCQUVJLEtBQUs7a0JBQ0wsS0FBSztpQkFDTCxLQUFLOzhCQUNMLE1BQU07NEJBQ04sTUFBTTs7QUEyQlgsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG9CQUFvQjtJQU41RDs7UUFVYyxvQkFBZSxHQUE0QixJQUFJLFlBQVksRUFBYSxDQUFDO1FBQ3pFLGtCQUFhLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7SUFDM0UsQ0FBQzs7O1lBWkEsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7K0JBQ2lCO2FBRTlCOzs7c0JBRUksS0FBSztrQkFDTCxLQUFLO2lCQUNMLEtBQUs7OEJBQ0wsTUFBTTs0QkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRzUGFydGljbGVzIH0gZnJvbSAndHNwYXJ0aWNsZXMnO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXIsIE1haW4gfSBmcm9tICd0c3BhcnRpY2xlcyc7XG5pbXBvcnQgeyBJUGFydGljbGVzUHJvcHMgfSBmcm9tICcuL25nLXBhcnRpY2xlcy5tb2R1bGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLXBhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBbaWRdPVwiaWRcIj48L2Rpdj4gYCxcbiAgICBzdHlsZXM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1BhcnRpY2xlc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIEBJbnB1dCgpIG9wdGlvbnM/OiBJUGFydGljbGVzUHJvcHM7XG4gICAgQElucHV0KCkgdXJsPzogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmc7XG4gICAgQE91dHB1dCgpIHBhcnRpY2xlc0xvYWRlZDogRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4oKTtcbiAgICBAT3V0cHV0KCkgcGFydGljbGVzSW5pdDogRXZlbnRFbWl0dGVyPE1haW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxNYWluPigpO1xuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdHNQYXJ0aWNsZXMuaW5pdCgpO1xuXG4gICAgICAgIHRoaXMucGFydGljbGVzSW5pdC5lbWl0KHRzUGFydGljbGVzKTtcblxuICAgICAgICBjb25zdCBjYiA9IChjb250YWluZXI/OiBDb250YWluZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzTG9hZGVkLmVtaXQoY29udGFpbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy51cmwpIHtcbiAgICAgICAgICAgIHRzUGFydGljbGVzLmxvYWRKU09OKHRoaXMuaWQsIHRoaXMudXJsKS50aGVuKGNiKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRzUGFydGljbGVzLmxvYWQodGhpcy5pZCwgdGhpcy5vcHRpb25zKS50aGVuKGNiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBtdXN0IHNwZWNpZnkgb3B0aW9ucyBvciB1cmwgdG8gbG9hZCB0c1BhcnRpY2xlcycpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1BhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBbaWRdPVwiaWRcIj48L2Rpdj4gYCxcbiAgICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlc0NvbXBvbmVudCBleHRlbmRzIE5nUGFydGljbGVzQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKSBvcHRpb25zPzogSVBhcnRpY2xlc1Byb3BzO1xuICAgIEBJbnB1dCgpIHVybD86IHN0cmluZztcbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBwYXJ0aWNsZXNMb2FkZWQ6IEV2ZW50RW1pdHRlcjxDb250YWluZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb250YWluZXI+KCk7XG4gICAgQE91dHB1dCgpIHBhcnRpY2xlc0luaXQ6IEV2ZW50RW1pdHRlcjxNYWluPiA9IG5ldyBFdmVudEVtaXR0ZXI8TWFpbj4oKTtcbn1cbiJdfQ==